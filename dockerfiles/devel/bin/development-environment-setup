#!/bin/bash

development_environment_setup_main(){
  local root
  local root_confirm

  root=$HOME
  if [ "$root" != "$(pwd)" ]; then
    echo home: $HOME
    read -p "OK? [Y/n] " root_confirm
    case "$root_confirm" in
      Y*|y*)
      ;;
      *)
        exit
      ;;
    esac
  fi

  development_environment_setup_dotfiles

  development_environment_setup_plugins
  development_environment_setup_vim
}

development_environment_setup_dotfiles(){
  local dir
  local repo

  dir=$root
  repo=git://github.com/shun-fix9/dotfiles
  development_environment_setup_git_sync "."
}

development_environment_setup_plugins(){
  local dir
  local repo

  dir=$root/plugins
  mkdir -p $dir

  local -a repos=(
    git://github.com/shun-fix9/mybashrc
    git://github.com/shun-fix9/findword
    git://github.com/shun-fix9/birdfirm
    git://github.com/shun-fix9/tmux-wrapper
    git://github.com/sanzen-sekai/mypassword
    git://github.com/sanzen-sekai/version-functions
    git://github.com/sanzen-sekai/dockerfile-build-functions
    git://github.com/sanzen-sekai/git-readme
    git://github.com/sanzen-sekai/git-pub
    git://github.com/sanzen-sekai/git-sub-status
    git://github.com/sanzen-sekai/git-post
    git://github.com/sanzen-sekai/git-tag-for-release
  )
  for repo in ${repos[@]}; do
    development_environment_setup_git_sync
  done

  development_environment_setup_direnv
  development_environment_setup_peco
}
development_environment_setup_direnv(){
  local direnv_version
  direnv_version=2.9.0
  echo install direnv v$direnv_version

  mkdir -p $dir/direnv/bin

  if [ ! -d $dir/direnv/$direnv_version ]; then
    mkdir -p $dir/direnv/$direnv_version
    cd $dir/direnv/$direnv_version
    curl -sSL https://github.com/direnv/direnv/releases/download/v$direnv_version/direnv.linux-amd64 > direnv
    chmod a+x direnv
    cd $dir/direnv/bin
    rm -f direnv
    ln -s ../$direnv_version/direnv
  fi
}
development_environment_setup_peco(){
  local peco_version
  peco_version=0.4.2
  echo install peco v$peco_version

  mkdir -p $dir/peco/bin

  if [ ! -d $dir/peco/$peco_version ]; then
    mkdir -p $dir/peco/$peco_version
    cd $dir/peco/$peco_version
    curl -sSL https://github.com/peco/peco/releases/download/v$peco_version/peco_linux_amd64.tar.gz > peco_linux_amd64.tar.gz
    tar xvzf peco_linux_amd64.tar.gz
    cd $dir/peco/bin
    rm -f peco
    ln -s ../$peco_version/peco_linux_amd64/peco
  fi
}
development_environment_setup_vim(){
  local dir
  local repo
  local file

  dir=$root/.vim/bundle
  mkdir -p $dir

  local -a repos=(
    git://github.com/tpope/vim-pathogen
    git://github.com/tpope/vim-fugitive
    git://github.com/tpope/vim-endwise
    git://github.com/msanders/snipmate.vim
    git://github.com/edsono/vim-matchit
    git://github.com/plasticboy/vim-markdown
    git://github.com/kchmck/vim-coffee-script
    git://github.com/cakebaker/scss-syntax.vim
    git://github.com/tpope/vim-cucumber
    git://github.com/tpope/vim-rails
    git://github.com/vim-ruby/vim-ruby
    git://github.com/vim-scripts/Railscasts-Theme-GUIand256color
  )
  for repo in ${repos[@]}; do
    development_environment_setup_git_sync
  done

  dir=$root/.vim/autoload
  mkdir -p $dir
  cd $dir

  for file in ../bundle/*/autoload/*; do
    if [ -f $file ]; then
      if [ ! -L "$(basename $file)" ]; then
        ln -s $file
      fi
    fi
  done
}

development_environment_setup_git_sync(){
  local name
  if [ -n "$1" ]; then
    name=$1
  else
    name=$(basename $repo)
  fi

  echo "$repo => $dir/$name"

  cd $dir
  if [ $name = "." ]; then
    if [ -d .git ]; then
      git pull
    else
      git clone $repo tmp_git_repo
      mv tmp_git_repo/.git .
      rm -rf tmp_git_repo
      git checkout .
    fi
  else
    if [ -d $name ]; then
      cd $name
      git pull
    else
      git clone $repo $name
    fi
  fi
}

development_environment_setup_main
